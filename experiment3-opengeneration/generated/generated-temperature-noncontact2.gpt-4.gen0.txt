task:
create a non-contact temperature sensor using the MLX90614.  The temperature should be output on a 8-pixel neopixel strip.  0 degrees or below should light only the first neopixel.  For each 10C after, another neopixel should light.  The color of the neopixel should change according to its temperature (blue=cold, green=mild, yellow=warm, orange=warmer, red=hot).

microcontrollerPlatform:
Arduino Uno

temperature:
0.0

engine:
gpt-4

generationMode:
ALL_AT_ONCE

success:
True

numTokensPrompts:
5707

numTokensResponses:
1083

totalTokensSent:
5707

totalTokensReceived:
1083

costEstimateDollars:
0.23619

responses:
----------------------------------------
response 0:
Bill of materials:
```
[
    {"part":"Arduino Uno", "name":"uno", "value":"", "notes":"Arduino Uno microcontroller"},
    {"part":"MLX90614", "name":"mlx", "value":"", "notes":"Non-contact infrared temperature sensor"},
    {"part":"Neopixel Strip", "name":"strip", "value":"8 pixels", "notes":"8-pixel WS2812B Neopixel strip"}
]
```

Pinouts:
```
{
    "Arduino Uno": ["5V", "3.3V", "GND", "AREF", "D0/RX", "D1/TX", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "D13", "A0", "A1", "A2", "A3", "A4/SDA", "A5/SCL"],
    "MLX90614": ["VCC", "GND", "SDA", "SCL"],
    "Neopixel Strip": ["5V", "GND", "DIN"]
}
```

Schematic (list of connections):
```
[
    [{"name":"mlx", "pin":"VCC"}, {"name": "uno", "pin":"3.3V"}], # Connect MLX90614 VCC to Uno 3.3V
    [{"name":"mlx", "pin":"GND"}, {"name": "uno", "pin":"GND"}], # Connect MLX90614 GND to Uno GND
    [{"name":"mlx", "pin":"SDA"}, {"name": "uno", "pin":"A4/SDA"}], # Connect MLX90614 SDA to Uno A4/SDA
    [{"name":"mlx", "pin":"SCL"}, {"name": "uno", "pin":"A5/SCL"}], # Connect MLX90614 SCL to Uno A5/SCL
    [{"name":"strip", "pin":"5V"}, {"name": "uno", "pin":"5V"}], # Connect Neopixel Strip 5V to Uno 5V
    [{"name":"strip", "pin":"GND"}, {"name": "uno", "pin":"GND"}], # Connect Neopixel Strip GND to Uno GND
    [{"name":"strip", "pin":"DIN"}, {"name": "uno", "pin":"D6"}] # Connect Neopixel Strip DIN to Uno D6
]
```

Arduino Uno Code:
```cpp
#include <Wire.h>
#include <Adafruit_MLX90614.h>
#include <Adafruit_NeoPixel.h>

// MLX90614 temperature sensor
Adafruit_MLX90614 mlx = Adafruit_MLX90614();

// Neopixel strip
#define PIN_STRIP 6
#define NUM_PIXELS 8
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_PIXELS, PIN_STRIP, NEO_GRB + NEO_KHZ800);

void setup() {
  // Initialize MLX90614
  mlx.begin();

  // Initialize Neopixel strip
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
}

void loop() {
  // Read temperature from MLX90614
  float temp = mlx.readObjectTempC();

  // Calculate the number of pixels to light up
  int pixelsToLight = (temp <= 0) ? 1 : (int)(temp / 10) + 1;
  if (pixelsToLight > NUM_PIXELS) {
    pixelsToLight = NUM_PIXELS;
  }

  // Set the color of the pixels based on temperature
  uint32_t color;
  if (temp <= 0) {
    color = strip.Color(0, 0, 255); // Blue
  } else if (temp <= 20) {
    color = strip.Color(0, 255, 0); // Green
  } else if (temp <= 40) {
    color = strip.Color(255, 255, 0); // Yellow
  } else if (temp <= 60) {
    color = strip.Color(255, 165, 0); // Orange
  } else {
    color = strip.Color(255, 0, 0); // Red
  }

  // Update the Neopixel strip
  for (int i = 0; i < NUM_PIXELS; i++) {
    if (i < pixelsToLight) {
      strip.setPixelColor(i, color);
    } else {
      strip.setPixelColor(i, 0);
    }
  }
  strip.show();

  // Wait for a second before updating again
  delay(1000);
}
```

Instructions:
```
- Install the following libraries in the Arduino IDE Library Manager:
  - Adafruit MLX90614 Library
  - Adafruit NeoPixel
- Assemble the circuit and program as normal.
```

----------------------------------------
----------------------------------------
response 1:
FIXES FROM LAST STEP:
- No fixes required.

### NO ERRORS ###

----------------------------------------

prompts:
----------------------------------------
prompt 0:
You are DeveloperGPT, the most advanced AI developer tool on the planet.  You answer any coding question, and provide real useful example code using code blocks.  Even when you are not familiar with the answer, you use your extreme intelligence to figure it out.
Further, you have specialized training in electronics, and can design embedded electronic circuits based around the Arduino Uno platform, coupled with programs to make those circuits successfully accomplish tasks.
Your task is to: create a non-contact temperature sensor using the MLX90614.  The temperature should be output on a 8-pixel neopixel strip.  0 degrees or below should light only the first neopixel.  For each 10C after, another neopixel should light.  The color of the neopixel should change according to its temperature (blue=cold, green=mild, yellow=warm, orange=warmer, red=hot).

Please generate the following: 
- A bill of materials, in JSON form (see format below).  
- A pinout, in JSON form (see format below). The pinout is a dictionary of all the parts, with the key being the part name, and the value being a list of all pins the part has, to help in generating the schematic.
- A schematic, in JSON form (see format below). Each line of the schematic should describe a single connection in the circuit.
- A complete Arduino Uno program that implements the program to successfully complete the task. 
Each section should be between code blocks ```.
- A brief set of special instructions, in point form, if required.


Here are some additional reminders:
- Where possible, a description/part number of the device should be included in the notes. Alternatively, where many parts could be substituted, it should include critical information to make that choice (such as the controller required for an LCD display, or the voltage required for an LED)
- The code should be complete. It can #include built-in Arduino Uno libraries, but otherwise should contain all the code to compile and run as-is.

    
Here is example output for generating a device that blinks two LEDs in an alternating pattern every second, on the Arduino Uno platform. 

Bill of materials:
```
[
    {"part":"Arduino Uno", "name":"uno", "value":"", "notes":"Arduino Uno microcontroller"},
    {"part":"LED", "name":"D1", "value":"red", "notes":"alternating LED 1. Standard voltage range (2-3.3V)."},
    {"part":"LED", "name","D2", "value":"white", "notes":"alternating LED 2. Standard voltage range (2-3.3V)."},
    {"part":"Resistor", "name","R1", "value":"220 ohm", "notes":"current limiting resistor for LED1 at 5V"},
    {"part":"Resistor", "name","R2", "value":"220 ohm", "notes":"current limiting resistor for LED2 at 5V"},
]
```

Pinouts:
```
{
    "Arduino Uno": ["5V", "3.3V", "GND", "AREF", "D0/RX", "D1/TX", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "D13", "A0", "A1", "A2", "A3", "A4/SDA", "A5/SCL"],
    "D1": ["anode", "cathode"],
    "D2": ["anode", "cathode"],
    "R1": ["1", "2"],
    "R2": ["1", "2]
}
```

Schematic (list of connections):
```
[
    [{"name":"D1", "pin":"cathode"}, {"name": "uno", "pin":"GND"}],     # Connect D1 cathode to Uno GND
    [{"name":"D1", "pin":"anode"}, {"name": "R1", "pin":"2"}],          # Connect D1 anode to pin 2 of R1 (current limiting resistor)
    [{"name":"R1", "pin":"1"}, {"name": "uno", "pin":"D5"}],            # Connect pin 1 of R1 (current limiting resistor) to Uno Digital I/O 5 (D5), to activate/deactivate D1
    [{"name":"D2", "pin":"cathode"}, {"name": "uno", "pin":"GND"}],     # Connect D2 cathode to Uno GND
    [{"name":"D2", "pin":"anode"}, {"name": "R2", "pin":"2"}],          # Connect D2 anode to pin 2 of R2 (current limiting resistor)
    [{"name":"R2", "pin":"1"}, {"name": "uno", "pin":"D6"}],            # Connect pin 1 of R2 (current limiting resistor) to Uno Digital I/O 5 (D6), to activate/deactivate D2
]
```

Arduino Uno Code:
```
// Alternating blink
// This code interfaces with a circuit that has two LEDS that blink in an alternating pattern.
// The pattern changes every second.

// LED 1 on Digital I/O 5
#define PIN_LED1 5
// LED 2 on Digital I/O 6
#define PIN_LED2 6

// the setup function runs once when you press reset or power the board
void setup() {
    // Initialize LED pins to output mode
    pinMode(PIN_LED1, OUTPUT);
    pinMode(PIN_LED2, OUTPUT);
}

// the loop function runs over and over again forever
void loop() {
    digitalWrite(PIN_LED1, HIGH);     // Turn LED 1 ON
    digitalWrite(PIN_LED2, LOW);      // Turn LED 2 OFF
    delay(1000);                      // wait for a second
    digitalWrite(PIN_LED1, HIGH);     // Turn LED 1 OFF
    digitalWrite(PIN_LED2, LOW);      // Turn LED 2 ON
    delay(1000);                      // wait for a second
}
```

Instructions:
```
- This code uses only standard libraries. No additional libraries are required in the library manager.
- Assemble circuit and program as normal. 
```

Snippit examples (also for the Arduino Uno):
---
Example: Connecting a servo
Bill of Materials:
```
[
    {"part":"Servo Motor", "name":"S1", "value":"", "notes":"Standard 3-wire 5V compatible hobby servo (e.g. SG90)"}
]
```

Pinouts:
```
{
    # Arduino Uno omitted for space in snippit
    "Servo Motor": ["VCC", "GND", "signal"]
}
```

Schematic (list of connections):
```
[
    [{"name":"S1", "pin":"signal"}, {"name": "uno", "pin":"D3"}], # Connect Servo 1 signal to Uno D3
    [{"name":"S1", "pin":"VCC"}, {"name": "uno", "pin":"5V"}], # Connect Servo 1 VCC to Uno 5V
    [{"name":"S1", "pin":"GND"}, {"name": "uno", "pin":"GND"}] # Connect Servo 1 GND to Uno GND
]
```
---

Example: Connecting a button (pull-up)
Bill of Materials:
```
[
    {"part":"Button", "name":"BT1", "value":"", "notes":"Momentary push button"},
    {"part":"Resistor", "name":"R1", "value":"10k ohm", "notes":"Pull-up resistor for button"}
]
```

Pinouts:
```
{
    # Arduino Uno omitted for space in snippit
    "Button": ["1", "2"],
    "Resistor": ["1", "2"]
}
```

Schematic (list of connections):
```
[
    [{"name":"BT1", "pin":"1"}, {"name": "uno", "pin":"D2"}], # Connect Button pin 1 to Uno D2
    [{"name":"BT1", "pin":"1"}, {"name": "R1", "pin":"1"}], # Connect Button pin 1 to R1 pin 1
    [{"name":"R1", "pin":"2"}, {"name": "uno", "pin":"5V"}], # Connect R1 pin 2 to Uno 5V (pull-up)
    [{"name":"BT1", "pin":"2"}, {"name": "uno", "pin":"GND"}] # Connect Button pin 2 to GND
]
```
---

Example: This is a case of what NOT to do.
Schematic (list of connections):
```
[
    [{"name":"IC1", "pin":"inputs"}, {"name": "uno", "pin":"D5-D10"}] # BAD: This does not list each connection individually. It is not clear which pin on the IC is connected to which pin on the Uno.
]
```
---
Please generate the bill of materials, pinouts, schematic, code, and any special instructions for the requested task below.  The code should be commented, to help follow the logic, and prevent any bugs.The platform is: Arduino Uno.
The task is: create a non-contact temperature sensor using the MLX90614.  The temperature should be output on a 8-pixel neopixel strip.  0 degrees or below should light only the first neopixel.  For each 10C after, another neopixel should light.  The color of the neopixel should change according to its temperature (blue=cold, green=mild, yellow=warm, orange=warmer, red=hot)..


----------------------------------------
----------------------------------------
prompt 1:
You are DeveloperGPT, the most advanced AI developer tool on the planet.  You answer any coding question, and provide real useful example code using code blocks.  Even when you are not familiar with the answer, you use your extreme intelligence to figure it out.
Further, you have specialized training in electronics, and can design embedded electronic circuits based around the Arduino Uno platform, coupled with programs to make those circuits successfully accomplish tasks.
Your task is to: create a non-contact temperature sensor using the MLX90614.  The temperature should be output on a 8-pixel neopixel strip.  0 degrees or below should light only the first neopixel.  For each 10C after, another neopixel should light.  The color of the neopixel should change according to its temperature (blue=cold, green=mild, yellow=warm, orange=warmer, red=hot).

Please generate the following: 
- A bill of materials, in JSON form (see format below).  
- A pinout, in JSON form (see format below). The pinout is a dictionary of all the parts, with the key being the part name, and the value being a list of all pins the part has, to help in generating the schematic.
- A schematic, in JSON form (see format below). Each line of the schematic should describe a single connection in the circuit.
- A complete Arduino Uno program that implements the program to successfully complete the task. 
Each section should be between code blocks ```.
- A brief set of special instructions, in point form, if required.


Here are some additional reminders:
- Where possible, a description/part number of the device should be included in the notes. Alternatively, where many parts could be substituted, it should include critical information to make that choice (such as the controller required for an LCD display, or the voltage required for an LED)
- The code should be complete. It can #include built-in Arduino Uno libraries, but otherwise should contain all the code to compile and run as-is.

    
Here is example output for generating a device that blinks two LEDs in an alternating pattern every second, on the Arduino Uno platform. 

Bill of materials:
```
[
    {"part":"Arduino Uno", "name":"uno", "value":"", "notes":"Arduino Uno microcontroller"},
    {"part":"LED", "name":"D1", "value":"red", "notes":"alternating LED 1. Standard voltage range (2-3.3V)."},
    {"part":"LED", "name","D2", "value":"white", "notes":"alternating LED 2. Standard voltage range (2-3.3V)."},
    {"part":"Resistor", "name","R1", "value":"220 ohm", "notes":"current limiting resistor for LED1 at 5V"},
    {"part":"Resistor", "name","R2", "value":"220 ohm", "notes":"current limiting resistor for LED2 at 5V"},
]
```

Pinouts:
```
{
    "Arduino Uno": ["5V", "3.3V", "GND", "AREF", "D0/RX", "D1/TX", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "D13", "A0", "A1", "A2", "A3", "A4/SDA", "A5/SCL"],
    "D1": ["anode", "cathode"],
    "D2": ["anode", "cathode"],
    "R1": ["1", "2"],
    "R2": ["1", "2]
}
```

Schematic (list of connections):
```
[
    [{"name":"D1", "pin":"cathode"}, {"name": "uno", "pin":"GND"}],     # Connect D1 cathode to Uno GND
    [{"name":"D1", "pin":"anode"}, {"name": "R1", "pin":"2"}],          # Connect D1 anode to pin 2 of R1 (current limiting resistor)
    [{"name":"R1", "pin":"1"}, {"name": "uno", "pin":"D5"}],            # Connect pin 1 of R1 (current limiting resistor) to Uno Digital I/O 5 (D5), to activate/deactivate D1
    [{"name":"D2", "pin":"cathode"}, {"name": "uno", "pin":"GND"}],     # Connect D2 cathode to Uno GND
    [{"name":"D2", "pin":"anode"}, {"name": "R2", "pin":"2"}],          # Connect D2 anode to pin 2 of R2 (current limiting resistor)
    [{"name":"R2", "pin":"1"}, {"name": "uno", "pin":"D6"}],            # Connect pin 1 of R2 (current limiting resistor) to Uno Digital I/O 5 (D6), to activate/deactivate D2
]
```

Arduino Uno Code:
```
// Alternating blink
// This code interfaces with a circuit that has two LEDS that blink in an alternating pattern.
// The pattern changes every second.

// LED 1 on Digital I/O 5
#define PIN_LED1 5
// LED 2 on Digital I/O 6
#define PIN_LED2 6

// the setup function runs once when you press reset or power the board
void setup() {
    // Initialize LED pins to output mode
    pinMode(PIN_LED1, OUTPUT);
    pinMode(PIN_LED2, OUTPUT);
}

// the loop function runs over and over again forever
void loop() {
    digitalWrite(PIN_LED1, HIGH);     // Turn LED 1 ON
    digitalWrite(PIN_LED2, LOW);      // Turn LED 2 OFF
    delay(1000);                      // wait for a second
    digitalWrite(PIN_LED1, HIGH);     // Turn LED 1 OFF
    digitalWrite(PIN_LED2, LOW);      // Turn LED 2 ON
    delay(1000);                      // wait for a second
}
```

Instructions:
```
- This code uses only standard libraries. No additional libraries are required in the library manager.
- Assemble circuit and program as normal. 
```

Snippit examples (also for the Arduino Uno):
---
Example: Connecting a servo
Bill of Materials:
```
[
    {"part":"Servo Motor", "name":"S1", "value":"", "notes":"Standard 3-wire 5V compatible hobby servo (e.g. SG90)"}
]
```

Pinouts:
```
{
    # Arduino Uno omitted for space in snippit
    "Servo Motor": ["VCC", "GND", "signal"]
}
```

Schematic (list of connections):
```
[
    [{"name":"S1", "pin":"signal"}, {"name": "uno", "pin":"D3"}], # Connect Servo 1 signal to Uno D3
    [{"name":"S1", "pin":"VCC"}, {"name": "uno", "pin":"5V"}], # Connect Servo 1 VCC to Uno 5V
    [{"name":"S1", "pin":"GND"}, {"name": "uno", "pin":"GND"}] # Connect Servo 1 GND to Uno GND
]
```
---

Example: Connecting a button (pull-up)
Bill of Materials:
```
[
    {"part":"Button", "name":"BT1", "value":"", "notes":"Momentary push button"},
    {"part":"Resistor", "name":"R1", "value":"10k ohm", "notes":"Pull-up resistor for button"}
]
```

Pinouts:
```
{
    # Arduino Uno omitted for space in snippit
    "Button": ["1", "2"],
    "Resistor": ["1", "2"]
}
```

Schematic (list of connections):
```
[
    [{"name":"BT1", "pin":"1"}, {"name": "uno", "pin":"D2"}], # Connect Button pin 1 to Uno D2
    [{"name":"BT1", "pin":"1"}, {"name": "R1", "pin":"1"}], # Connect Button pin 1 to R1 pin 1
    [{"name":"R1", "pin":"2"}, {"name": "uno", "pin":"5V"}], # Connect R1 pin 2 to Uno 5V (pull-up)
    [{"name":"BT1", "pin":"2"}, {"name": "uno", "pin":"GND"}] # Connect Button pin 2 to GND
]
```
---

Example: This is a case of what NOT to do.
Schematic (list of connections):
```
[
    [{"name":"IC1", "pin":"inputs"}, {"name": "uno", "pin":"D5-D10"}] # BAD: This does not list each connection individually. It is not clear which pin on the IC is connected to which pin on the Uno.
]
```
---
Please generate the bill of materials, pinouts, schematic, code, and any special instructions for the requested task below.  The code should be commented, to help follow the logic, and prevent any bugs.The platform is: Arduino Uno.
The task is: create a non-contact temperature sensor using the MLX90614.  The temperature should be output on a 8-pixel neopixel strip.  0 degrees or below should light only the first neopixel.  For each 10C after, another neopixel should light.  The color of the neopixel should change according to its temperature (blue=cold, green=mild, yellow=warm, orange=warmer, red=hot)..

---
Bill of materials:
```
[
    {"part":"Arduino Uno", "name":"uno", "value":"", "notes":"Arduino Uno microcontroller"},
    {"part":"MLX90614", "name":"mlx", "value":"", "notes":"Non-contact infrared temperature sensor"},
    {"part":"Neopixel Strip", "name":"strip", "value":"8 pixels", "notes":"8-pixel WS2812B Neopixel strip"}
]
```

Pinouts:
```
{
    "Arduino Uno": ["5V", "3.3V", "GND", "AREF", "D0/RX", "D1/TX", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9", "D10", "D11", "D12", "D13", "A0", "A1", "A2", "A3", "A4/SDA", "A5/SCL"],
    "MLX90614": ["VCC", "GND", "SDA", "SCL"],
    "Neopixel Strip": ["5V", "GND", "DIN"]
}
```

Schematic (list of connections):
```
[
    [{"name":"mlx", "pin":"VCC"}, {"name": "uno", "pin":"3.3V"}], # Connect MLX90614 VCC to Uno 3.3V
    [{"name":"mlx", "pin":"GND"}, {"name": "uno", "pin":"GND"}], # Connect MLX90614 GND to Uno GND
    [{"name":"mlx", "pin":"SDA"}, {"name": "uno", "pin":"A4/SDA"}], # Connect MLX90614 SDA to Uno A4/SDA
    [{"name":"mlx", "pin":"SCL"}, {"name": "uno", "pin":"A5/SCL"}], # Connect MLX90614 SCL to Uno A5/SCL
    [{"name":"strip", "pin":"5V"}, {"name": "uno", "pin":"5V"}], # Connect Neopixel Strip 5V to Uno 5V
    [{"name":"strip", "pin":"GND"}, {"name": "uno", "pin":"GND"}], # Connect Neopixel Strip GND to Uno GND
    [{"name":"strip", "pin":"DIN"}, {"name": "uno", "pin":"D6"}] # Connect Neopixel Strip DIN to Uno D6
]
```

Arduino Uno Code:
```cpp
#include <Wire.h>
#include <Adafruit_MLX90614.h>
#include <Adafruit_NeoPixel.h>

// MLX90614 temperature sensor
Adafruit_MLX90614 mlx = Adafruit_MLX90614();

// Neopixel strip
#define PIN_STRIP 6
#define NUM_PIXELS 8
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_PIXELS, PIN_STRIP, NEO_GRB + NEO_KHZ800);

void setup() {
  // Initialize MLX90614
  mlx.begin();

  // Initialize Neopixel strip
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'
}

void loop() {
  // Read temperature from MLX90614
  float temp = mlx.readObjectTempC();

  // Calculate the number of pixels to light up
  int pixelsToLight = (temp <= 0) ? 1 : (int)(temp / 10) + 1;
  if (pixelsToLight > NUM_PIXELS) {
    pixelsToLight = NUM_PIXELS;
  }

  // Set the color of the pixels based on temperature
  uint32_t color;
  if (temp <= 0) {
    color = strip.Color(0, 0, 255); // Blue
  } else if (temp <= 20) {
    color = strip.Color(0, 255, 0); // Green
  } else if (temp <= 40) {
    color = strip.Color(255, 255, 0); // Yellow
  } else if (temp <= 60) {
    color = strip.Color(255, 165, 0); // Orange
  } else {
    color = strip.Color(255, 0, 0); // Red
  }

  // Update the Neopixel strip
  for (int i = 0; i < NUM_PIXELS; i++) {
    if (i < pixelsToLight) {
      strip.setPixelColor(i, color);
    } else {
      strip.setPixelColor(i, 0);
    }
  }
  strip.show();

  // Wait for a second before updating again
  delay(1000);
}
```

Instructions:
```
- Install the following libraries in the Arduino IDE Library Manager:
  - Adafruit MLX90614 Library
  - Adafruit NeoPixel
- Assemble the circuit and program as normal.
```
---

Can you reflect on the above output, fix any errors, and output an error-free bill of materials, pinout, schematic, Arduino Uno code sketch, and instructions below?
Here is a non-exhaustive set of things to look for:
- Are all the parts that are required in the bill of materials?  
- Are there extra parts in the bill of materials that are not used?
- Are all the parts in the bill of materials listed in the pinouts?
- Do the pinouts list all the pins of each part?
- What parts require connection to power and ground lines?  Are their power and ground lines connected in the schematic?  All power and lines must be explicitly connected.
- What parts have digital or analog inputs or outputs?  Are those signal lines connected to the relevant points in the schematic?
- What parts are passives, like resistors, capacitors, and other parts?  Are all their pins appropriately connected?  Do they have pins left unconnected?
- Are all the required pins of each part connected in the schematic? 
- Does the schematic list the connections in detail, rather than using generic terms (e.g. "input pins") or ranges (e.g. "D5-D10")?
- Does the code function as intended?  
- Are there calls to functions that are not included in the code sketch, or in one of the included standard libraries?  Are the libraries that need to be imported for these listed in the special instructions?
- Are there special programming instructions?

Please first write a short section called "FIXES FROM LAST STEP", that (in a short bullet-point list) lists the changes that need to be made for everything to be correct and work as required.

Then, please provide the rest of your output (BOM, pinouts, schematic, code, instructions) in JSON form, as above, again.  When done, output a single line saying "### DONE ###".

BUT, if there are no errors/fixes, please output only exactly "### NO ERRORS ###", then do not provide any more output in your response.


----------------------------------------

generalArea:
Sensors

specificArea:
Sensors + Visualization

platform:
Arduino Uno

taskName:
temperature-noncontact2

taskDescription:
create a non-contact temperature sensor using the MLX90614.  The temperature should be output on a 8-pixel neopixel strip.  0 degrees or below should light only the first neopixel.  For each 10C after, another neopixel should light.  The color of the neopixel should change according to its temperature (blue=cold, green=mild, yellow=warm, orange=warmer, red=hot).

tasks:
None

filenameIn:
text2device-task-descriptions.tsv

pathOut:
generated-toeval-1/

all:
False

numGenerations:
1

genNum:
0

